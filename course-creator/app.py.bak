from flask import Flask, request, jsonifyfrom flask import Flask, request, jsonify# Introduction to Python Programming

from flask_cors import CORS

from content_ingestion import (from flask_cors import CORS

    extract_text_from_pdf,

    extract_text_from_docx,from content_ingestion import (## Course Overview

    extract_text_from_pptx,

    extract_text_from_youtube,    extract_text_from_pdf,Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

    extract_text_from_website,

)    extract_text_from_docx,

from text_preprocessing import clean_and_chunk_text

from llm_processor import generate_course_from_text    extract_text_from_pptx,## Chapter 1: Getting Started

from chroma_storage import ChromaDocumentStore

    extract_text_from_youtube,### Basic Syntax

app = Flask(__name__)

CORS(app)    extract_text_from_website,Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.



# Initialize ChromaDB)

document_store = ChromaDocumentStore()

from text_preprocessing import clean_and_chunk_textExample:

@app.route('/upload', methods=['POST'])

def upload_content():from llm_processor import generate_course_from_text```python

    try:from chroma_storage import ChromaDocumentStoreif True:

        text = ""

        user_prompt = request.form.get('prompt', '')    print("Hello, World!")

        source_info = {}

        app = Flask(__name__)    if x > 0:

        if not request.files and not request.form.get('url'):

            return jsonify({"error": "No file or URL provided"}), 400CORS(app)        print("Positive number")

```

        if 'file' in request.files:

            file = request.files['file']# Initialize ChromaDB

            if not file.filename:

                return jsonify({"error": "No file selected"}), 400document_store = ChromaDocumentStore()### Variables and Data Types

                

            source_info = {- Integers: Whole numbers (e.g., 5, -17, 1000)

                "type": file.filename.split('.')[-1].lower(),

                "name": file.filename@app.route('/upload', methods=['POST'])- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)

            }

            def upload_content():- Strings: Text data ("Hello", 'Python')

            try:

                if file.filename.endswith('.pdf'):    try:- Booleans: True or False

                    text = extract_text_from_pdf(file)

                elif file.filename.endswith('.docx'):        text = ""- Lists: Ordered collections [1, 2, 3]

                    text = extract_text_from_docx(file)

                elif file.filename.endswith('.pptx'):        user_prompt = request.form.get('prompt', '')- Dictionaries: Key-value pairs {"name": "John", "age": 30}

                    text = extract_text_from_pptx(file)

                else:        source_info = {}

                    return jsonify({"error": "Unsupported file type"}), 400

            except Exception as e:        ## Chapter 2: Control Flow

                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

                        if not request.files and not request.form.get('url'):### Conditional Statements

        elif 'url' in request.form:

            url = request.form['url']            return jsonify({"error": "No file or URL provided"}), 400Use if, elif, and else for decision making:

            if not url:

                return jsonify({"error": "No URL provided"}), 400```python

                if 'file' in request.files:age = 18

            source_info = {

                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",            file = request.files['file']if age < 13:

                "name": url

            }            if not file.filename:    print("Child")

            

            try:                return jsonify({"error": "No file selected"}), 400elif age < 20:

                if 'youtube.com' in url or 'youtu.be' in url:

                    text = extract_text_from_youtube(url)                    print("Teenager")

                else:

                    text = extract_text_from_website(url)            source_info = {else:

            except Exception as e:

                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500                "type": file.filename.split('.')[-1].lower(),    print("Adult")



        if not text.strip():                "name": file.filename

            return jsonify({"error": "No content could be extracted"}), 400```



        # Clean and chunk the text            }

        try:

            chunks = clean_and_chunk_text(text)            ### Loops

            if not chunks:

                return jsonify({"error": "Content processing failed"}), 400            try:Two main types of loops:

        except Exception as e:

            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500                if file.filename.endswith('.pdf'):1. For loops - iterate over sequences



        try:                    text = extract_text_from_pdf(file)2. While loops - repeat while condition is true

            # Store chunks in ChromaDB

            course_id = document_store.store_course_content(chunks, source_info)                elif file.filename.endswith('.docx'):

            

            # Generate course content                    text = extract_text_from_docx(file)## Chapter 3: Functions

            course_json = generate_course_from_text(chunks, user_prompt)

                            elif file.filename.endswith('.pptx'):Functions are reusable blocks of code:

            response_data = {

                "course_id": course_id,                    text = extract_text_from_pptx(file)```python

                "extracted_text": text,else:def greet(name):

                "course": course_json

            }                    return jsonify({"error": "Unsupported file type"}), 400    return f"Hello, {name}!"

            return jsonify(response_data)

        except Exception as e:            except Exception as e:

            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500

                            return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500print(greet("Alice"))

    except Exception as e:```# Introduction to Python Programming

        app.logger.error(f"Upload error: {str(e)}")

        return jsonify({"error": f"Upload failed: {str(e)}"}), 500        elif 'url' in request.form:



@app.route('/search', methods=['POST'])            url = request.form['url']## Course Overview

def search_content():

    """            if not url:Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

    Search for relevant content in stored courses

    """                return jsonify({"error": "No URL provided"}), 400

    query = request.json.get('query')

    n_results = request.json.get('n_results', 5)                ## Chapter 1: Getting Started

    

    if not query:            source_info = {### Basic Syntax

        return jsonify({"error": "No query provided"}), 400

                        "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

    results = document_store.search_content(query, n_results)

    return jsonify(results)                "name": url



@app.route('/course/<course_id>', methods=['GET'])            }Example:

def get_course(course_id):

    """            ```python

    Retrieve all content for a specific coursetry:if True:

    """

    try:                if 'youtube.com' in url or 'youtu.be' in url:    print("Hello, World!")

        course_content = document_store.get_course_chunks(course_id)

        return jsonify(course_content)                    text = extract_text_from_youtube(url)    if x > 0:

    except Exception as e:

        return jsonify({"error": str(e)}), 404                else:        print("Positive number")



@app.route('/course/<course_id>', methods=['DELETE'])                    text = extract_text_from_website(url)

def delete_course(course_id):```

    """

    Delete a course and all its content            except Exception as e:

    """

    try:                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500### Variables and Data Types

        document_store.delete_course(course_id)

        return jsonify({"message": "Course deleted successfully"})- Integers: Whole numbers (e.g., 5, -17, 1000)

    except Exception as e:

        return jsonify({"error": str(e)}), 404        if not text.strip():- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)



if __name__ == '__main__':            return jsonify({"error": "No content could be extracted"}), 400- Strings: Text data ("Hello", 'Python')

    app.run(debug=True)
- Booleans: True or False

        # Clean and chunk the text- Lists: Ordered collections [1, 2, 3]

        try:- Dictionaries: Key-value pairs {"name": "John", "age": 30}

            chunks = clean_and_chunk_text(text)

            if not chunks:## Chapter 2: Control Flow

                return jsonify({"error": "Content processing failed"}), 400### Conditional Statements

        except Exception as e:Use if, elif, and else for decision making:

            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500```python
age = 18

        try:if age < 13:

            # Store chunks in ChromaDB    print("Child")

            course_id = document_store.store_course_content(chunks, source_info)elif age < 20:

                print("Teenager")

            # Generate course contentelse:

            course_json = generate_course_from_text(chunks, user_prompt)    print("Adult")
```

            response_data = {

                "course_id": course_id,### Loops

                "extracted_text": text,Two main types of loops:

                "course": course_json1. For loops - iterate over sequences

            }2. While loops - repeat while condition is true

            return jsonify(response_data)

        except Exception as e:## Chapter 3: Functions

            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500Functions are reusable blocks of code:

            ```python
except Exception as e:def greet(name):

        app.logger.error(f"Upload error: {str(e)}")    return f"Hello, {name}!"

        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

print(greet("Alice"))

@app.route('/search', methods=['POST'])
```# Introduction to Python Programming

def search_content():

    """## Course Overview

    Search for relevant content in stored coursesPython is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

    """

    query = request.json.get('query')## Chapter 1: Getting Started

    n_results = request.json.get('n_results', 5)### Basic Syntax

    Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

    if not query:

        return jsonify({"error": "No query provided"}), 400Example:

        ```python
results = document_store.search_content(query, n_results)if True:

    return jsonify(results)    print("Hello, World!")

    if x > 0:

@app.route('/course/<course_id>', methods=['GET'])        print("Positive number")

def get_course(course_id):
```

    """

    Retrieve all content for a specific course### Variables and Data Types

    """- Integers: Whole numbers (e.g., 5, -17, 1000)

    try:- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)

        course_content = document_store.get_course_chunks(course_id)- Strings: Text data ("Hello", 'Python')

        return jsonify(course_content)- Booleans: True or False

    except Exception as e:- Lists: Ordered collections [1, 2, 3]

        return jsonify({"error": str(e)}), 404- Dictionaries: Key-value pairs {"name": "John", "age": 30}



@app.route('/course/<course_id>', methods=['DELETE'])## Chapter 2: Control Flow

def delete_course(course_id):### Conditional Statements

    """Use if, elif, and else for decision making:

    Delete a course and all its content```python
"""age = 18

    try:if age < 13:

        document_store.delete_course(course_id)    print("Child")

        return jsonify({"message": "Course deleted successfully"})elif age < 20:

    except Exception as e:    print("Teenager")

        return jsonify({"error": str(e)}), 404else:

    print("Adult")

if __name__ == '__main__':
```

    app.run(debug=True)
### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```# Introduction to Python Programming

## Course Overview
Python is a high-level, interpreted programming language that emphasizes code readability with its notable use of significant whitespace. It is widely used in web development, data science, artificial intelligence, and automation.

## Chapter 1: Getting Started
### Basic Syntax
Python syntax is designed to be clear and readable. Unlike many other programming languages, Python uses indentation to indicate code blocks.

Example:
```python
if True:
    print("Hello, World!")
    if x > 0:
        print("Positive number")
```

### Variables and Data Types
- Integers: Whole numbers (e.g., 5, -17, 1000)
- Floats: Decimal numbers (e.g., 3.14, -0.001, 2.0)
- Strings: Text data ("Hello", 'Python')
- Booleans: True or False
- Lists: Ordered collections [1, 2, 3]
- Dictionaries: Key-value pairs {"name": "John", "age": 30}

## Chapter 2: Control Flow
### Conditional Statements
Use if, elif, and else for decision making:
```python
age = 18
if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")
```

### Loops
Two main types of loops:
1. For loops - iterate over sequences
2. While loops - repeat while condition is true

## Chapter 3: Functions
Functions are reusable blocks of code:
```python
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
```from flask import Flask, request, jsonify
from flask_cors import CORS
from content_ingestion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)estion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)from flask import Flask, request, jsonify
from flask_cors import CORS
from content_ingestion import (
    extract_text_from_pdf,
    extract_text_from_docx,
    extract_text_from_pptx,
    extract_text_from_youtube,
    extract_text_from_website,
)
from text_preprocessing import clean_and_chunk_text
from llm_processor import generate_course_from_text
from chroma_storage import ChromaDocumentStore

app = Flask(__name__)
CORS(app)

# Initialize ChromaDB
document_store = ChromaDocumentStore()

@app.route('/upload', methods=['POST'])
def upload_content():
    try:
        text = ""
        user_prompt = request.form.get('prompt', '')
        source_info = {}
        
        if not request.files and not request.form.get('url'):
            return jsonify({"error": "No file or URL provided"}), 400

        if 'file' in request.files:
            file = request.files['file']
            if not file.filename:
                return jsonify({"error": "No file selected"}), 400
                
            source_info = {
                "type": file.filename.split('.')[-1].lower(),
                "name": file.filename
            }
            
            try:
                if file.filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file)
                elif file.filename.endswith('.docx'):
                    text = extract_text_from_docx(file)
                elif file.filename.endswith('.pptx'):
                    text = extract_text_from_pptx(file)
                else:
                    return jsonify({"error": "Unsupported file type"}), 400
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500
                
        elif 'url' in request.form:
            url = request.form['url']
            if not url:
                return jsonify({"error": "No URL provided"}), 400
                
            source_info = {
                "type": "youtube" if ('youtube.com' in url or 'youtu.be' in url) else "website",
                "name": url
            }
            
            try:
                if 'youtube.com' in url or 'youtu.be' in url:
                    text = extract_text_from_youtube(url)
                else:
                    text = extract_text_from_website(url)
            except Exception as e:
                return jsonify({"error": f"Failed to extract content: {str(e)}"}), 500

        if not text.strip():
            return jsonify({"error": "No content could be extracted"}), 400

        # Clean and chunk the text
        try:
            chunks = clean_and_chunk_text(text)
            if not chunks:
                return jsonify({"error": "Content processing failed"}), 400
        except Exception as e:
            return jsonify({"error": f"Failed to process text: {str(e)}"}), 500

        try:
            # Store chunks in ChromaDB
            course_id = document_store.store_course_content(chunks, source_info)
            
            # Generate course content
            course_json = generate_course_from_text(chunks, user_prompt)
            
            response_data = {
                "course_id": course_id,
                "extracted_text": text,
                "course": course_json
            }
            return jsonify(response_data)
        except Exception as e:
            return jsonify({"error": f"Failed to store or process content: {str(e)}"}), 500
            
    except Exception as e:
        app.logger.error(f"Upload error: {str(e)}")
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_content():
    """
    Search for relevant content in stored courses
    """
    query = request.json.get('query')
    n_results = request.json.get('n_results', 5)
    
    if not query:
        return jsonify({"error": "No query provided"}), 400
        
    results = document_store.search_content(query, n_results)
    return jsonify(results)

@app.route('/course/<course_id>', methods=['GET'])
def get_course(course_id):
    """
    Retrieve all content for a specific course
    """
    try:
        course_content = document_store.get_course_chunks(course_id)
        return jsonify(course_content)
    except Exception as e:
        return jsonify({"error": str(e)}), 404

@app.route('/course/<course_id>', methods=['DELETE'])
def delete_course(course_id):
    """
    Delete a course and all its content
    """
    try:
        document_store.delete_course(course_id)
        return jsonify({"message": "Course deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)}), 404

if __name__ == '__main__':
    app.run(debug=True)