import os
import json
import re
from typing import Dict, List, Optional
from ai_providers import ai_manager

# Quiz interfaces (similar to Quizzy app)
class Question:
    def __init__(self, id: int, question: str, options: List[str], correct_answer: int, explanation: str = ""):
        self.id = id
        self.question = question
        self.options = options
        self.correct_answer = correct_answer
        self.explanation = explanation
    
    def to_dict(self):
        return {
            "id": self.id,
            "question": self.question,
            "options": self.options,
            "correctAnswer": self.correct_answer,
            "explanation": self.explanation
        }

class Quiz:
    def __init__(self, id: str, title: str, topic: str, questions: List[Question]):
        self.id = id
        self.title = title
        self.topic = topic
        self.questions = questions
        self.total_questions = len(questions)
    
    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "topic": self.topic,
            "questions": [q.to_dict() for q in self.questions],
            "totalQuestions": self.total_questions
        }

class QuizGenerator:
    def __init__(self):
        self.ai_manager = ai_manager
        print(f"Quiz generator initialized with AI provider: {self.ai_manager.current_provider.__class__.__name__}")
    
    def generate_quiz_from_content(self, content: str, topic: str, num_questions: int = 5) -> Quiz:
        """Generate a quiz from text content using the AI manager"""
        try:
            # Limit content length to avoid API limits
            max_text_length = 8000
            truncated_content = content if len(content) <= max_text_length else content[:max_text_length] + "..."
            
            prompt = f"""Based on the following educational content, generate a comprehensive quiz with exactly {num_questions} multiple choice questions.

Content:
"{truncated_content}"

Topic: {topic}

For each question, provide:
1. A well-crafted question that tests understanding, not just recall
2. Four plausible answer options (only one correct)
3. The index (0-3) of the correct answer
4. A clear explanation of the correct answer

Format your response as a valid JSON object with this exact structure:
{{
  "questions": [
    {{
      "question": "What is the primary purpose of variables in Python?",
      "options": ["To store data values", "To create functions", "To define classes", "To import modules"],
      "correctAnswer": 0,
      "explanation": "Variables are containers used to store data values in Python. They allow programmers to label and manipulate data throughout their code."
    }}
  ]
}}

Question requirements:
- Test conceptual understanding, not just memorization
- Include a mix of factual, conceptual, and application-based questions
- Make incorrect options plausible but clearly wrong
- Vary difficulty levels (some easy, some challenging)
- Cover different aspects of the content comprehensively
- Use clear, unambiguous language
- Reference specific concepts from the provided content

Respond with only the JSON object, no additional text or explanations."""

            # Use the AI manager to generate the quiz
            messages = [
                {"role": "system", "content": "You are an expert quiz creator who generates high-quality educational assessments. Always respond with valid JSON only."},
                {"role": "user", "content": prompt}
            ]
            
            # Get the current provider and make the request
            provider = self.ai_manager.current_provider
            if hasattr(provider, '_make_request'):
                response_text = provider._make_request(messages, max_tokens=2000)
            else:
                # Fallback to using the provider's generate_lesson_content method
                response_text = provider.generate_lesson_content(
                    lesson_title=f"Quiz generation for {topic}",
                    lesson_summary=prompt,
                    context_chunks=[]
                )
            
            print(f"Generated quiz text length: {len(response_text)} characters")
            if not response_text:
                raise Exception("No content generated by AI provider")
            
            # Parse the JSON response
            json_match = re.search(r'\{{[\s\S]*\}}', response_text)
            if not json_match:
                # Try to find JSON array directly
                json_match = re.search(r'\[[\s\S]*\]', response_text)
                if json_match:
                    # Wrap array in object
                    quiz_data = {"questions": json.loads(json_match.group(0))}
                else:
                    raise Exception("Could not extract JSON from AI response")
            else:
                quiz_data = json.loads(json_match.group(0))
            
            # Ensure we have the expected structure
            if 'questions' not in quiz_data:
                raise Exception("Invalid quiz format: missing 'questions' key")
            
            # Transform to our Quiz format
            questions = []
            for i, q_data in enumerate(quiz_data['questions']):
                question = Question(
                    id=i + 1,
                    question=q_data['question'],
                    options=q_data['options'],
                    correct_answer=q_data['correctAnswer'],
                    explanation=q_data.get('explanation', '')
                )
                questions.append(question)
            
            return Quiz(
                id=str(hash(content + topic) % 10**10),
                title=f"{topic} Quiz",
                topic=topic,
                questions=questions
            )
            
        except Exception as e:
            print(f"Error generating quiz with AI provider: {e}")
            print("Falling back to simple quiz generation")
            return self._generate_fallback_quiz(content, topic, num_questions)
    
    def _generate_fallback_quiz(self, content: str, topic: str, num_questions: int) -> Quiz:
        """Fallback quiz generation when API is unavailable"""
        # Simple keyword extraction and question generation
        sentences = content.split('.')
        key_sentences = [s.strip() for s in sentences if len(s.strip()) > 50][:num_questions]
        
        questions = []
        for i, sentence in enumerate(key_sentences):
            # Create a simple question from the sentence
            question_text = f"What is the main point of: '{sentence[:100]}...'?"
            
            # Generate simple options
            options = [
                sentence[:50] + "...",
                "This is a key concept from the content",
                "An important detail to remember",
                "A supporting example or fact"
            ]
            
            question = Question(
                id=i + 1,
                question=question_text,
                options=options,
                correct_answer=0,  # First option is correct (the actual content)
                explanation=f"This answer is directly from the lesson content: {sentence[:100]}..."
            )
            questions.append(question)
        
        return Quiz(
            id=str(hash(content + topic) % 10**10),
            title=f"{topic} Quiz",
            topic=topic,
            questions=questions
        )
    
    def generate_quiz_from_module(self, module_data: Dict) -> Quiz:
        """Generate a quiz from a complete module with lessons"""
        # Combine all lesson content
        all_content = []
        topic = module_data.get('title', 'Module')
        
        for lesson in module_data.get('lessons', []):
            lesson_title = lesson.get('title', '')
            lesson_summary = lesson.get('summary', '')
            if lesson_summary:  # Only include if summary exists
                all_content.append(f"Lesson: {lesson_title}\n{lesson_summary}")
        
        combined_content = "\n\n".join(all_content)
        
        # Generate quiz with more questions for complete module
        # Ensure at least 3 questions, up to 10
        num_questions = max(3, min(len(module_data.get('lessons', [])), 10))
        return self.generate_quiz_from_content(combined_content, topic, num_questions)

# Global quiz generator instance
quiz_generator = QuizGenerator()